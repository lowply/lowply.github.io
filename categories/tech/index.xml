<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on lowply.github.io</title>
    <link>https://lowply.github.io/categories/tech/</link>
    <description>Recent content in Tech on lowply.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 17 Aug 2017 19:56:26 +0900</lastBuildDate>
    
	<atom:link href="https://lowply.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub PagesとマージしてURLを変えた</title>
      <link>https://lowply.github.io/blog/2017/08/merge-github-pages/</link>
      <pubDate>Thu, 17 Aug 2017 19:56:26 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2017/08/merge-github-pages/</guid>
      <description>2006年から使っていたfixture.jpというドメインをブログに使うのをやめて、これまでプロフィール的に使っていたGitHub Pagesのドメインlowply.github.ioに統合しました。
2016年の6月にGitHubに入社して以来、Pagesをもう少し積極的に使っていきたいと思っていたのと、HTTPSを使いたいだけのためにCloudFrontを経由したS3でホストするのも大げさだなと思ってのアイデアです。
ちょっと困ったのは、lowply.github.ioのようなドメイン直下にPagesのサイトを置きたい場合、ソースの配置先はmasterブランチのみで/docsが選べなかったこと。
 If your site is a User or Organization Page that has a repository named &amp;lt;username&amp;gt;.github.io or &amp;lt;orgname&amp;gt;.github.io, you cannot publish your site&amp;rsquo;s source files from different locations. User and Organization Pages that have this type of repository name are only published from the master branch.
 Configuring a publishing source for GitHub Pages
Hugoで生成したファイル群をリポジトリの直下に置かないといけないので、ディレクトリの見通しが悪くなる。仕方がないからコンテンツやテーマといったHugo関連のファイル群を.hugoディレクトリに置くことに。隠しディレクトリにしているのは、hugoコマンドに--cleanDestinationDirをつけても自分自身が消されないためです。
というわけで、書きたいネタは少しずつ浮かぶものの形にできず更新が止まっているブログですが、引き続き時間を見て書いていきます。Photo Journalもそのうち更新します。</description>
    </item>
    
    <item>
      <title>要約 : Apple iPhone5のページのJPEGとJSとcanvasタグによるビデオの実装がやばいという話</title>
      <link>https://lowply.github.io/blog/2012/09/how-apple-compresses-video-in-iphone5-website/</link>
      <pubDate>Wed, 19 Sep 2012 21:29:43 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2012/09/how-apple-compresses-video-in-iphone5-website/</guid>
      <description>2012年9月26日 追記しました。
要約エントリー。
元記事 : iPhone 5 website teardown: How Apple compresses video using JPEG, JSON, and &amp;lt;canvas&amp;gt;
アップルのサイトのiPhone5のページにある「スライドしてアンロック」のアニメーションが、信じられない実装になっている、という話。簡単に要約してみた。（ミスなどの指摘は @lowply までお願いします）
もともとh.264とWebMの動画フォーマット戦争でブラウザ互換性の問題がまだ残っている上、iPhoneなどは「再生ボタン」を押さないと再生できなかったりするので、こうした短いアニメーションにvideoタグを使うことは最適解ではなかったらしい。
そこで発想の転換をして、Retina MBPのページでは、蓋が開くたった2秒間のアニメーションに60枚のJPGをぶん回すという荒業を使っていた。これは実に5MBもの画像を使っていることになる（そのかわりRetinaディスプレイに対応した画像サイズにはなっていない）↓ これ。
で、今回のiPhone5のアンロックアニメーションは更に手法を更に進化させて、1MBに収まる2枚のJPG画像をJSで高速に差し替えてcanvasタグ内に描画している。各フレームごとのJPGの位置はJSONで記述されていて、全体的な制御は ac_flow.js が行なっていると。圧縮されたJPG画像はこんな感じ。注：バグってるわけではありません。元画像はこちら
ここまで来ると誰にも真似できないというか、驚きを通り越して恐怖。昔から思ってたけど、Appleのウェブサイトって本当に一つの目指すべき姿だと思う。
元記事にはより技術的な詳細や、EarPodsのQTVR的な動きの実装についても言及されているので、すべてのUI/UXデザインに関わる人にとって一読の価値ありかと。
2012年9月26日 追記 昨夜、この記事がFICCの@akirafukuokaさんに紹介され、さらに尊敬する@fladdictさんにRTされた形で一気に拡散し、ホットエントリー入りしました。まさか自分のVPSが最大瞬間7.5Mbpsのトラフィックを出すとは思ってもいなかったです。
感動して勢いで書いた部分もあり、読み返して表現が間違ってるなーと思う部分もあったので訂正しつつ追記。
各方面のコメント はてブ http://b.hatena.ne.jp/entry/fixture.jp/blog/2012/09/how-apple-compresses-video-in-iphone5-website/
Twitter https://twitter.com/i/#!/search/?q=fixture.jp
一番見かけたのが「こんなん目指すべき姿じゃない」というご意見。
アホ言え! 一番真似しちゃアカンタイプのバッドノウハウの塊やないかい!! こんなん目指してどうするんだよ。こういう事やらなくて良い世界目指す方でおねがいします。 まずSafariでインライン再生できるようにするのが先じゃないのか   バッドかどうかは後述するとして、このノウハウそのものが「目指すべき姿」だとは思っていないのですが、言葉足らずでした。スミマセン。
ここで書きたかったことは、この10年Appleのサイトを見てきて一度も「大規模リニューアル」とかをせず、新製品が登場するごとに部分的に変化し、HTML5, JS, CSSを使って新しい技術を積極的に取り入れながら、まるで生き物のように成長していく全体的なサイト運営手法が、大規模オフィシャルサイトのひとつの「目指すべき姿」だと感じたということです。これは昔から思っていたことです。
Appleサイトに見るグローバルメニューの画像置換手法 | fixture.jp
ウェブ上での表現、特にモーションがあるものに関してはFlashからJSへの過渡期であったり、まだまだ模索段階だと思います。だから、一つの技法を編み出して、それを大規模サイトに躊躇なく投入していく実験的な姿勢が、次の時代の流れを作っていくのではないかと思っています。そういう意味で、今はバッドノウハウでも、やがて最適化されて未来の標準技術になっていく可能性は大いにあると思います。AJAXのように。
これがバッドノウハウを使わないと実装できないのなら、間違ってるのは仕様の方です。実装は結果のためにあるのであって、逆ではありません。   MotionJPEGが普及しなかったように、実装と仕様には常にタイミングの問題が絡みついてきますね。
あと次に見かけて驚いたのが、実は昔からある技法ということ。
ぜんぜん違うけど何となくMSX時代の裏ページに置く展開前の超圧縮画像を思い出した 変態というか、8ビット時代のプログラミングって感じだな。 昔ながらのビデオプログラミングのやり方をHTML5流で。 古典的な技術の昇華がすごい。   リソースが少なかった頃のレトロゲーム時代によくこういう実装をしていた、ということ。なるほど先人の知恵が細い3G回線とモバイルデバイスの環境でまた生きてくるわけですねー。ダブルバッファリングという単語も見かけましたが、ちょっと詳しくは調べきれていません。
技術的にはすごいんだろうけど開いたらCPU使用率MAXになったので結果的にはイケてないサイトになってる   これはスゴイ嫌ですね。昔のFlashサイトはこういうことよくありました。ただ今回の例では、自分の環境ではCPUは一瞬上がるだけで特に問題ないように思いました。</description>
    </item>
    
    <item>
      <title>DeliciousからPinboardに引っ越した</title>
      <link>https://lowply.github.io/blog/2012/03/bye-delicious-hello-pinboard/</link>
      <pubDate>Sun, 18 Mar 2012 03:14:46 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2012/03/bye-delicious-hello-pinboard/</guid>
      <description>SBMにはずっとDeliciousを使ってたんだけど、Pinboardに乗り換えることにした。
Pinboard: social bookmarking for introverts
2010年の年末に、Yahoo!がDeliciousを閉鎖するっていう騒ぎがあって、その時に多くの人がPinboardに流れた。自分もその時にアカウントを作ったけど、2006年から6年以上使ってきたDeliciousに愛着もあってすぐに乗り換えたりはしなかった。
今回乗り換えたのは、せっかく1年前に買い手が見つかったにも関わらずこの1年で良い方向に進化しなかった（余計な機能が増えてスピードが遅くなった）っていうのと、いつかPinboardみたいなテイストのサービスを作りたいと思ってるから。
- Speed, speed, speed
- An information-dense user interface.
- An ad-free site with no third-party tracking.
- A way to save notes and other snippets of text as bookmarks.
- No length limits on descriptions.
- A way to quickly save and restore open tabs.
- Built-in integration with Instapaper.
- A fandom-friendly site.
- Built-in sync of links and favorites from multiple Twitter accounts.</description>
    </item>
    
    <item>
      <title>iOS&#43;クラウド時代の写真共有ツールAdobe Revel</title>
      <link>https://lowply.github.io/blog/2012/02/revel-is-ios-and-cloud-generation-app/</link>
      <pubDate>Wed, 22 Feb 2012 23:27:24 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2012/02/revel-is-ios-and-cloud-generation-app/</guid>
      <description>Adobe Revelすごい。
Adobe® Revelは、iPad、iPhone、Macからフォトライブラリへのアクセスを提供するデジタルフォトソリューションです。容量制限の問題や手作業による同期の手間に煩わされることはありません。   定額無制限ストレージとかはさておき、個人的にすごいと思ったのはこの2つ。
Mac AppがiOS AppのUI OSから&amp;rdquo;Mac&amp;rdquo; の名が取れたMountain Lionといい、デスクトップの終わりが近いんだなあ、と。このUIはマウス／トラックパッドでは使いにくい。でも逆にそれが象徴的。デスクトップアプリの扱いがこの程度ということは、そういうことだ。
実ファイルはクラウド上 写真を右クリックして、良くある「Finderに表示」をやろうと思っても、できない。Adobeのサーバー上の画像データが実ファイル扱いだから。ローカルにはキャッシュのみ。この感覚はiPhoto/ApertureにとってのPhoto Streamとは別世界だ。バックアップどうすればいいのか少し気になるけど。
iPad3がRetina Displayになるっぽいのでなおさら期待。
See Also : 2648-120211 Adobe Revelっていいかも: shiology</description>
    </item>
    
    <item>
      <title>Yahoo! UI CSSが2.3になってパーフェクトになりました</title>
      <link>https://lowply.github.io/blog/2007/11/yahoo-ui-css-comes-perfect/</link>
      <pubDate>Thu, 15 Nov 2007 19:54:43 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2007/11/yahoo-ui-css-comes-perfect/</guid>
      <description>いつの間にかYahoo UIが 2.3.0にバージョンアップしていて、CSSシリーズも今までで一番たくさんのアップデートが行われた模様。 その中で特に嬉しかったのがFonts CSSの以下のアップデート。
* Updated %-to-px conversion charted for increased accuracy across browsers
* Move body line-height away from * wildcard selector. Now it is part of the initial BODY rule set.
* Changed core lineheight from 1.22em to 1.231 (no units)
* Changed code,pre to not use font-property shorthand syntax
* Tweaked the sizing fix for monospace font size (pre,code...)
* Added &#34;kbd,samp,tt&#34; as new selectors for monospaced font stuff</description>
    </item>
    
    <item>
      <title>Appleサイトに見るグローバルメニューの画像置換手法</title>
      <link>https://lowply.github.io/blog/2007/08/how-apple-uses-css-ir-on-their-globalmenu/</link>
      <pubDate>Sat, 11 Aug 2007 01:19:56 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2007/08/how-apple-uses-css-ir-on-their-globalmenu/</guid>
      <description>ここ2年ぐらいで、Appleのサイトは積極的にCSSとかAJAXとか新しい技術を採り入れ始めていて、最近はCSS関連のイベントで「AppleサイトのCSSを解析する」みたいなスピーチをされた方もいるらしく、サイトの存在自体がおもしろくなってきたと思う。特に個人的にスゴイと思うのは、全体一発リニューアル！とかやらずに「少しづつ、かつ抜け目なく」新しい技術をサイトに注入して、まるで生物が進化するかのようなアップデートをしているところ。一発リニューアル！が難しい大企業系サイトとして、ここまで柔軟かつデザインドリブンな運営方法は学ぶべきところが大きいと思う。
とはいってもAppleではiPhone登場時、アップルジャパンでは新iMac登場時に、10年近く使い続けたタブデザインを新しくし、珍しく全ページに渡る更新を敢行。早速Firebugなんかで構造をチェックしていると、グローバルメニューの画像置換に、あまり見ないCSS指定を使っているのを発見。
基本的には、li要素の中にa要素、liをdisplay:inline; にして横並びにする方法なんだけど、内部のa要素に
#globalheader #globalnav li a { float: left; width: 117px; height: 0; padding-top: 38px; overflow: hidden; }  みたいな指定をしてる。
まあ見てしまえば簡単だけど、なぜ今まで思いつかなかったんだろうと自戒。この手法は結構一般的なのかな？「height:0;」を思いつくかどうかが肝なんだな、きっと。。。
text-indentに大きなマイナス値を入れる方法だと、firefoxなどでクリック時にその大きさの点線が出現する（本当はa要素にoutline属性を使うか、onfocus=&amp;ldquo;this.blur();&amp;rdquo; と書けば消えるんだけど、横に2000pxとかずれてるのを想像するとなんか気持ち悪い）し、span要素などを入れ子にしてdisplay:none;する方法だとHTMLに視覚要素を一つ増やしてしまう。ということで、Apple様大変勉強になりました。</description>
    </item>
    
    <item>
      <title>clearfixよりoverflowの方が良い理由</title>
      <link>https://lowply.github.io/blog/2007/02/why-overflow-is-better-than-clearfix/</link>
      <pubDate>Wed, 14 Feb 2007 04:43:38 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2007/02/why-overflow-is-better-than-clearfix/</guid>
      <description>雑誌にも登場していたし、最近ブーム？のclearfixというCSSハック。clearfixっていうのは最初の人が考えた単なるクラス名なので変えてもいいんですが、肝心なのは中身。どういうものかというと、
.clearfix:after { content: &amp;amp;quot;.&amp;amp;quot;; display: block; height: 0; clear: both; visibility: hidden; } .clearfix {display: inline-table;} /* Hides from IE-mac */ * html .clearfix {height: 1%;} .clearfix {display: block;} /* End hide from IE-mac */  みたいなハックだらけの長いCSSを書いて、フロートさせている要素のみを内包した要素に適用して、HTMLに一切変更を加えずclearと同様の効果を得るというもの。詳細はclearfixでGoogle検索すればいろいろわかります。 で、これと同じ効果は
overflow:hidden;  で再現できるので、僕はいつもこちらを使ってwrapperとか名前付けたdivの高さを確保しています。（Mac IEは検証すらせず無視しています）
clearfixはハックだらけな上に、要素にクラス名をひとつ増やさなきゃいけないので。。。一方、overflow:hidden; を使う場合、完全にMac IEとNetscape7の表示はあきらめなきゃいけないんですが、いまどきそんなものは無視！というスタンスの場合、おすすめです。というより、そういうスタンス自体がおすすめです。 さらに、overflow:hidden; は、モダンブラウザで要素A内にある要素Bのmargin-topが要素Aのmargin-topになってしまう表示（仕様？）や、IE6でdivがある一定以下の高さになってくれないときなどにも使えます。正しい使い方なのか不明ですが。。。　このへんの詳細についてはまたいつか書きたいと思ってます。</description>
    </item>
    
    <item>
      <title>tagometer雑感</title>
      <link>https://lowply.github.io/blog/2007/01/think-tagometer/</link>
      <pubDate>Thu, 04 Jan 2007 23:10:20 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2007/01/think-tagometer/</guid>
      <description>とっくに年も明けてしまいましたが、あけましておめでとうございます。12月はいろいろ楽しいことも忙しいこともあり、すっかり更新をほったらかしてました。
さて、ずっとやりたかった&amp;quot;tagometer&amp;quot;をつけてみたのでまとめ。
■ http://del.icio.us/help/tagometer
■ はてなブックマーク - ヘルプ - 自分のブログに「○○users」を表示
delicious派なのですが、日本でははてブが一番メジャーなので両刀使いです。
設置はエントリー・アーカイブに上記からコピペしたソースを貼り付けただけ。簡単すぎて半信半疑だったのですが、あっさりと動きました。ただ、僕の場合は一箇所CSSを書き直さなきゃいけなかったんですが、これは設置するブログによってさまざまでしょう。
被ブクマ数が多いのはやっぱり、このブログで唯一のビッグ・エントリー「Googleカレンダーを携帯で見る方法：補足」ですが、そのほかにもごくたまーにブクマされていてうれしいです。特に検索プラグインなどの自作もののエントリーとか、なんかの使用法とか、なんか役立ってる感があります。というか役に立たないエントリーはブクマされませんよね普通。そんなわけで2007年もよろしくおねがいいたします。</description>
    </item>
    
    <item>
      <title>YUI Library CSS toolsがバージョンアップ</title>
      <link>https://lowply.github.io/blog/2006/12/yui-library-css-tools-update/</link>
      <pubDate>Fri, 08 Dec 2006 03:50:47 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/12/yui-library-css-tools-update/</guid>
      <description>Yahoo UI Libraryが 0.12.0にバージョンアップしてCSS関連も若干修正された様子。
CSS Reset  hn要素にfont-weight:normal;が追加 abbr,acronym要素に border:0;が追加  CSS Fonts  font:x- と smallの間の不要な改行の修正  CSS Grid  大幅に変更  その他  CSS reset-fonts-grids というお手軽3パックが追加。  という感じで、まあ良くなってます。ただ個人的には以前から、Fontsの一番最後、
body * {line-height:1.22em;}  という指定が理解できません。line-heightは単位なし指定が基本じゃなかったっけ。。。しかも全称セレクタを使われると継承がうまく効かなくて厄介なんですが。。。　というわけでここだけ
body {line-height:1.5;}  とかにして使っています。詳細なドキュメントがほしいところ。
Yahoo! User Interface Library</description>
    </item>
    
    <item>
      <title>ほとんどのブラウザで背景の半透明化を可能にするCSS指定</title>
      <link>https://lowply.github.io/blog/2006/11/css-to-enable-bg-transparent-for-almost-browsers/</link>
      <pubDate>Wed, 29 Nov 2006 04:06:45 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/11/css-to-enable-bg-transparent-for-almost-browsers/</guid>
      <description>hoge
2012/2/22 追記：未だに結構アクセスあるのですが、2006年11月の記事になります。2012年現在はもっと良いソリューションがあるはずなので、それを踏まえて参考にして頂ければと思います。リンクとか切れてるし。
前回のおさらい：
#TB_overlay { position: absolute; z-index:100; top: 0px; left: 0px; background-color:#000; **filter:alpha(opacity=60); -moz-opacity: 0.6; opacity: 0.6;** }  thickbox.css ですが、
 IE独自拡張CSSのfilter:alpha（正式にはActiveXらしい via filter:alphaで大ハマり）を最初に指定 mozilla系独自プロパティ-moz-opacityで透明度を指定 CSS3ドラフト段階のもまで先行実装していて最も正確にCSSをレンダリングするOperaとSafariに向けてopacityプロパティを指定  これで世の中の99%ぐらいのブラウザ上で、半透明効果をかけられるんじゃないでしょうか。肝心なのは指定の順番かな？Validではない順に記述していくことで、長期的に使えるように。
と思ったら、結構知られているテクニックなんですね。。
IE・Firefox・Opera・Netscape・Safariで表示可能な半透明CSS/Opacityテクニック - WEBデザイン　BLOG
ネタ元では3ページに渡って詳細に実験しています。
Exploring Opacity - Mandarin Design
こちらを読むと、Firefoxではopacityプロパティを認識するようになったらしく、-moz-opacityは後方互換性のために残してあるだけのようです。
おまけ
CSS3はこうなる - GIGAZINE</description>
    </item>
    
    <item>
      <title>SWFObjectのgetSWFHTML() というメソッドが全く知られてない件</title>
      <link>https://lowply.github.io/blog/2006/11/does-anybody-knows-about-getswfhtml-of-swfobject/</link>
      <pubDate>Mon, 27 Nov 2006 00:42:06 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/11/does-anybody-knows-about-getswfhtml-of-swfobject/</guid>
      <description>全ウェブデザイナー・フラッシャー必携といっても過言ではないSWFコンテンツ埋め込みライブラリ「SWFObject」ですが、更に便利に記述する方法が紹介されているエントリーを発見したのでまとめ。
まず、SWFObjectの利点：
 IEのActive Content Update 問題に対応済み XHTML Validな記述ができる Flashプラグインのバージョン検出が可能 Macromedia Flashがデフォルトで吐き出すタグよりシンプル  それで、欠点は一つもないです。Adobeのサイトでも使用されている様子。というかそれならAdobeはAC_RunActiveContentとかやってる場合じゃないんですけどね。。。
そして、発見したのは下記のエントリー。
BicRe: SWFObjectの便利なメソッド
本家SWFObjectドキュメントを日本語版に翻訳した超重要エントリー &amp;quot; SWFObjectのドキュメントを日本語に翻訳してみたよ&amp;quot; にも見当たらなかったんですが、SWFObjectにはgetSWFHTML()ってメソッドがあるらしく、以下
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var so = new SWFObject(&amp;quot;hoge.swf&amp;quot;, &amp;quot;text for movie&amp;quot;, &amp;quot;320&amp;quot;, &amp;quot;260&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;#FFFFFF&amp;quot;); document.write(so.getSWFHTML()); &amp;lt;/script&amp;gt;  と記述すれば一行で書けてしまいます、ということ。代替テキストを表示できなくなるというリスクはあるものの、divを少しでも減らしたい人、早く書きたい人、オススメです。これ、Googleで検索しても7件ぐらいしか出てこないんですが、どうしてなんでしょうかね？（海外だともう少し出てきます） また、setFlash() なる関数を作ってaddVariable()メソッドと組み合わせワザで、もっと便利なものも作ったりされてて感動。</description>
    </item>
    
    <item>
      <title>tha社のサイトがリニューアル</title>
      <link>https://lowply.github.io/blog/2006/10/tha-site-renewaled/</link>
      <pubDate>Mon, 23 Oct 2006 11:57:45 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/10/tha-site-renewaled/</guid>
      <description>tha.jp
中村勇吾氏率いるtha社のサイトが、引越に合わせてリニューアルした模様。Google Maps APIをFlashで斜めにした上に、ムービー連動させたりしてます。
uniqlo NY sohoも美しさ・伝わりやすさ・動かす楽しさがパーフェクトに揃ってました。ムービーの最後にちらっとオフィスが写ってます。
 nisshi.yugop yugop作品の魅力 - miamoto.net  追記：10/23に、公開直後にGoogle Map八分になって撃沈との記事がアップされています。1日限定のサイトとなってしまいました。見ることができてよかったけど、残念です。fladdict氏作だったようです。</description>
    </item>
    
    <item>
      <title>Googleカレンダーを携帯で見る方法：補足</title>
      <link>https://lowply.github.io/blog/2006/09/how-to-view-google-calendar-on-cellphone-complement/</link>
      <pubDate>Wed, 20 Sep 2006 13:37:08 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/09/how-to-view-google-calendar-on-cellphone-complement/</guid>
      <description>たたみラボ: Googleカレンダーを携帯で見る方法
で紹介されているGoogle Calendarの使い方がすごい！と思ったのですが、 カレンダーを公開にしなくても携帯から見ることができる方法を発見。
Gcalの設定画面で、携帯から見たいカレンダーの名前をクリックし、一番下に出てくる「Private Address:」の中の「HTML」ボタンをクリックします。（※参考画像） そして出てきたURLをクリック、移動後のカレンダーページの右上のタブから「Agenda」を選択。そのページのURLを携帯に送れば、見れます。
原理としては、「Calendar Address:」というのは公開しているカレンダーのための一元的なURLで、「Private Address:」の方はそこにランダムな文字列を付加して認証不要の参照ができるようにしたもの、ということかな。
This is the private address for this calendar. Don&#39;t share this address with others unless you want them to see all the events on this calendar.   設定項目の下には、上に引用したような記述もあるので、このURLは他人には公開しないことを前提として用意されているようです。また、リセットボタンを押すことによって任意のタイミングで文字列をランダムに変える手段を提供しているのがすごいです。 えーつまりまとめると、
http://www.google.com/calendar/embed?src=アカウント名%40gmail.com&amp;amp;pvttk=ランダムな文字列&amp;amp;mode=AGENDA
ということになります。スケジュールの参照だけなら特に認証する必要ない、というたたみラボの大井氏の意見にすごく賛成です。出先で「この日空いてる？」って聞かれたとき、単に見れれば良いわけですから。これはもう手放せないです。こういう手段もきっちり用意しているところが、やっぱりGoogleですね。
2007/05/25 追記
やっとというか、ついにというか、Google Calendarもモバイル版が正式に出ました。予定の追加ができるので、イイです。携帯電話から「calendar.google.com」へアクセスするだけですが、モバイル版にPCからでもアクセス可。</description>
    </item>
    
    <item>
      <title>Happy Birthday del.icio.us</title>
      <link>https://lowply.github.io/blog/2006/09/happy-birthday-delicious/</link>
      <pubDate>Sat, 16 Sep 2006 19:07:47 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/09/happy-birthday-delicious/</guid>
      <description>大変お世話になっております del.icio.us が3歳に。このファミコン世代の心をくすぐるアイコンが良い感じ。これからもシンプルに、シンプルに、No ADのまま、進化して行って欲しいです。</description>
    </item>
    
    <item>
      <title>$関数とjQueryオブジェクトという哲学</title>
      <link>https://lowply.github.io/blog/2006/09/dollar-function-and-jquery-object/</link>
      <pubDate>Sat, 09 Sep 2006 02:20:44 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/09/dollar-function-and-jquery-object/</guid>
      <description>jQuery - New Wave Javascript
かなり今更感もありますが、jQueryの素晴らしさに気づいてしまったのでエントリー。
いろいろ調べると書いてありますが、jQueryとは、JavaScriptライブラリの元祖とも言われるprototype.jsを意識した上で、更にJavaScriptプログラミングをもっと楽しめるように、ってコンセプトで開発されました。ということです。
で、僕はJavaScriptとDOMの基礎をかじった程度の何も分からないに等しい人間だったのですが、テストページ作ってみると哲学がシンプルでビシバシ伝わってくる感じ。2分で外部HTMLロードのコードの書き方が理解できる。更にjQueryを使ってコードを書いているうちにJavaScriptに対する理解もどんどん深まっていって、ひとつの習得法として成立の予感。書籍より最初は実践ありきですね、なんでも。
ビジュアル表現は積極的に使うべきか微妙ですが、「$関数とjQueryオブジェクト」っていう概念、メソッドの連鎖、CSSへのアクセスでhashが使える、軽い、とかそこらへんがキーかな？
メソッドの内容は少なめでこれぐらいなら覚えられそうですが、一応　jQuery Map なんてprototypeチックなモノもあります。これは便利。そんで、Visual jQuery でこのマップが動く。あと以下のサイトがとりあえず国内最高のjQueryドキュメントになっているはずです。（英語の資料はたくさん出ています）
jQuery 開発者向けメモ
その他詳しいことは、GIGAZINEのエントリーを始めいろんなところで触れられているので略。 Google氏に聞いて下さい。</description>
    </item>
    
    <item>
      <title>Adobeが自社ブックマークをdel.icio.usで公開</title>
      <link>https://lowply.github.io/blog/2006/08/adobe-opens-bookmarks-on-delicious/</link>
      <pubDate>Thu, 24 Aug 2006 23:25:15 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/08/adobe-opens-bookmarks-on-delicious/</guid>
      <description>「はてなブックマークはバカ論争」がヒートアップしている日本のソーシャルブックマーク界ですが、米Adobeが自身のブックマークをdel.icio.usにて公開、という記事。
Adobe shares their del.icio.us links - lifehacker.com
こちらがadobeのdel.icio.us
del.icio.us/adobe
大企業がオフィシャルブログを持つことは常識になりつつありますが、ソーシャルブックマークを公開するというのは思いもつかなかった。これは新手のプロモーションになるかもしれないです。</description>
    </item>
    
    <item>
      <title>Google Ice Cream</title>
      <link>https://lowply.github.io/blog/2006/08/google-ice-cream/</link>
      <pubDate>Tue, 15 Aug 2006 01:29:55 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/08/google-ice-cream/</guid>
      <description>PizzaプログラムとかやってくれてるGoogleが、アイスクリームを出した。サンフランシスコで有名（らしい）IT&amp;rsquo;S IT Ice Cream とGoogleのコラボレーションGoogle Ice Creamは「The G本社 = マウンテンビュー」のカフェでのみ発売中。Cool！
I scream for (Google) ice cream - Google Blog</description>
    </item>
    
    <item>
      <title>Picasa Web Albumsスクリーンショットレビュー</title>
      <link>https://lowply.github.io/blog/2006/06/picasa-web-albums-screenshot-review/</link>
      <pubDate>Sat, 24 Jun 2006 15:54:43 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/06/picasa-web-albums-screenshot-review/</guid>
      <description>というわけで、届いたXiaostyleを使ってみました。
カメラ自体はとにかく使いにくいし安っぽいのでプロダクトとしてはダメですが、撮影した感じは期待通りのトイカメラ風味。壊さないように大事に使います。電池の持ち悪いです。エネループ必須。 ちょっと前に、先日テスト公開されたGoogleのオンラインアルバムサービスPicasa Web Albumsのインビテーションも届いて、いろいろ試したのでレビュー。表計算とかよりもやってほしかったサービスだったのですが、やってくれてます。
 無料ストレージが250MB 年間25ドルで6GBまで拡張できる（米国のみ） RSSフィード機能 Picasaから一発アップロード  と期待以上。
対抗馬はiPhoto+.Macなのかもしれませんが、メールにしても何にしてもGoogleの場合全てフリーだし、使いやすさも上回る感じです。
スクリーンショット（写真は全てXiaostyle TDG-501）
写真を表示した状態。キーボードの←→で写真移動ができる。
ドラッグアンドドロップで、アルバムのサムネイルの並び替えができる。
アルバムを表示した状態。http://picasaweb.google.com/アカウント名/アルバム名/ と、アルバムごとにURLを持つので、相手を決めて公開できる。
Picasaがなくてもアップロードは可能。ISO、絞りなどEXIF情報も同時にアップ（時刻表示は確認できず）。この画面で、現在の使用量を現すバーを確認できる。
スライドショー。escキーでライブラリに戻る。Picasa側で画質を3段階から選べるが、一番大きいものでないと少し画質が悪い。写真はすべてプログレッシブJPGのような動作をする工夫がされている。
アルバムへのインビテーションメールを送れる。もちろん、自分のGmailアカウントのアドレス帳からオートコンプリート可能。
Flickrほどソーシャルな感じではないのですが、あえて差別化を図っている印象もあります。早く6GBサービスが日本で始まって欲しいです。</description>
    </item>
    
    <item>
      <title>CSS Reboot、ウェブデザイン2006</title>
      <link>https://lowply.github.io/blog/2006/06/css-reboot-web-design-2006/</link>
      <pubDate>Fri, 16 Jun 2006 03:02:36 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/06/css-reboot-web-design-2006/</guid>
      <description>■ CSS Reboot に見るウェブデザインのトレンド : Lucky bag::blog
CSS Rebootというサイトで、今のウェブデザインのトレンドがわかるよ、というエントリー。
んで、Christian Montoyaが今回の Reboot でのデザインのトレンドについて書いていたんだけど、大雑把に書き出してみると下記のような感じ。
- 1024px の幅
- Silk Icons の使用
- 暗い背景に明るい色のテキスト
- 大きめのフッタ
Lucky bag::blog  1024px幅については、A List Apart が採用した幅 1024px のレイアウトというエントリーでも触れられています。ちょっと前に右サイドメニューを追加したmixiのトップもほぼ同じ幅。
いくつか関わっているサイトにGoogle Analyticsで簡単なアクセス解析をしているのですが、ビジターのディスプレイ解像度をチェックしてみると 1024pxは一番多く、1280px以上の人も結構多い。800x600の時代は終わったのかもしれないです。むしろ携帯端末のVGA化、フルブラウザの登場+パケット定額+TV対応、iPod向けムービーコンテンツ、YouTubeの台頭なんかで、640x480というサイズが見直されてくるのかもしれません。
それと、以前紹介した「Silk Icons」はやっぱり多用されているらしいです。背景も黒がトレンドということで、特に鏡面反射画像が映えるのはApple的解釈だと黒なのかなあ、と。。。トレンドを特に追うわけでもないですが、2006年という年を刻んでおければなあと思います。</description>
    </item>
    
    <item>
      <title>「Yahoo! UI Library CSS Tools」が良い</title>
      <link>https://lowply.github.io/blog/2006/06/yahoo-ui-library-css-tools-is-cool/</link>
      <pubDate>Tue, 06 Jun 2006 22:20:47 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/06/yahoo-ui-library-css-tools-is-cool/</guid>
      <description>Yahoo!（US）が提供しているJavaScriptのライブラリ「Yahoo! User Interface Library」。Flashチックなアニメーションやフォルダ等の階層ツリー表示を簡単に作成できるってことで使ったことは無いけどすごいなあと思っていたところ、5/8にバージョン「0.10.0」となってCSSのライブラリも登場。こちらは簡単で、項目も3つだけ。
 CSS Page Grids：一番作業効率に寄与してくれるであろう、段組レイアウト用CSS。大急ぎで段組レイアウトやろうとするときはかなり助かるはず。grids.cssを外部CSSとして読み込んで(X)HTMLソースもコピペですばやく段組が作れます。ただし互換モードだと崩れるとのこと。doctype宣言に注意。それと、 Grids rely on the width of an &amp;quot;em&amp;quot; provided by Fonts CSS; that file must be included. For the sake of this document, the convenience declarations within Reset CSS are also assumed. 3ping.org  上記のように残り2つのCSSも同時に読み込んで使うことが推奨されています。
 CSS Fonts：これはCSSファイル自体も便利ですが、一番素敵なのは、「フォントを&amp;quot;X&amp;quot;pxの大きさにしたかったら&amp;quot;Y&amp;quot;%を指定しなさい」という絶対指定⇔相対指定変換表。ちなみに同じ相対サイズでもem指定より%指定の方が正確性が高いとのこと。
 CSS Reset：全要素のマージン・パディングを0にしてフォントサイズを100%にしてリスト要素を…　というやつ。これはブラウザ個別にもっているdefault CSSの微妙な差を一度リセットする常套手段ですが、人（サイト）それぞれなので参考という感じで。
  Yahoo!謹製PDF版カンニングペーパーもあるようです。</description>
    </item>
    
    <item>
      <title>mixiを脱テーブル化するスタディ</title>
      <link>https://lowply.github.io/blog/2006/05/escape-from-table-layout-a-study-of-mixi/</link>
      <pubDate>Fri, 26 May 2006 04:52:29 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/escape-from-table-layout-a-study-of-mixi/</guid>
      <description>ためになるエントリーが多い3ping.orgからmixiをXHTML+CSSで組みなおすというエントリー。
- テーブルで組まれたmixiのhtmlファイル容量が48KB (自分のページ調べ)
- XHTML+CSSで構成されたhtmlファイル容量が16KB
この軽量化率が他のページにも当てはまるとすれば、mixiをXHTML+CSSで書き直すだけでhtmlファイルのトラフィックを3分の1にする事が出来る。mixiの１日のPVは1000万と聞いたけど、削減される転送量は月で何テラだろう。サーバー管理費にするといくらだろう。 3ping.org  3分の1というのは素晴らしい。CSSのソースも非常に洗練されていて、「一通りプロパティを覚えてCSSを使えるようになった」という人は絶対目を通したほうが良いと思います。一意のdiv要素内のタグに対して、極力クラス名を割り当てないでスタイルを適用するという、「カスケーディング」の理解が深まるはず。これがCSSの本当の魅力なんだと思います。 XHTMLとCSSの詳細な構造をグラフィカルにたどれるFirefoxの拡張FireBugを使うと、より勉強になります。最新バージョンにはJSのデバッガも付いて、かなり強力なコーディングツールになってます。
- JavaScript debugger for stepping through code one line at a time
- Status bar icon shows you when there is an error in a web page
- A console that shows errors from JavaScript and CSS
- Log messages from JavaScript in your web page to the console (bye bye &amp;quot;alert debugging&amp;quot;)
- An JavaScript command line (no more &amp;quot;javascript:&amp;quot; in the URL bar)</description>
    </item>
    
    <item>
      <title>Livedoor Readerを使いこなす</title>
      <link>https://lowply.github.io/blog/2006/05/using-livedoor-reader/</link>
      <pubDate>Wed, 24 May 2006 01:19:00 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/using-livedoor-reader/</guid>
      <description>スーパー・アルファ &amp;ldquo;[N]ネタフル&amp;rdquo; よりlivedoor readerの良さを伝えるチャットというエントリー。
いしたにの発言: enter、enter、たまにshift＋enter
いしたにの発言: pしてo
いしたにの発言: これ！
いしたにの発言: 次はshift↓ですけどね
いしたにの発言: Pしてoの感激で他は覚えますよ
 これ使ってない人には何のことだかわからないし、使っていても僕のように「ピン」の活用を知らない人間にとっては驚きの会話。やってみると・・・まさしく、PしてO！！さらにCと組み合わせ、自動更新ONでタブに常駐がベスト。ためになります。http://reader.livedoor.com/ のポップアップ・ブロックをオフにするのをお忘れなく。
 Livedoor Reader  </description>
    </item>
    
    <item>
      <title>WebStandard on IE7 beta2 preview</title>
      <link>https://lowply.github.io/blog/2006/05/webstandard-on-ie7-beta2-preview/</link>
      <pubDate>Sat, 20 May 2006 22:14:13 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/webstandard-on-ie7-beta2-preview/</guid>
      <description>現時点での（そして正式リリースまで変わらないであろう）IE7での改善点をメモ。
○
 CSSプロパティ「position:fixed;」をサポート
 alpha値を含むPNGをサポート
 文書の先頭にxml宣言があっても標準モードへスイッチ
 ActiveXObjectではなく、XMLHTTPRequestをネイティブでサポート  相当良くなってきました。タブつきなので普及のスピードも速いはず。
×
 MIMEタイプ「application/xml+xhtml」はサポートしない方針
 Acid2 Testは全くだめ
  ダウンロード：Internet Explorer 7 Beta 2 Preview 日本語版</description>
    </item>
    
    <item>
      <title>DWカスタマイズ：CodeHints.xml</title>
      <link>https://lowply.github.io/blog/2006/05/dw-customize-codehints-xml/</link>
      <pubDate>Mon, 15 May 2006 22:54:35 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/dw-customize-codehints-xml/</guid>
      <description>Dreamweaver8でCSSを書いていると、誰でも一度は「width」を入力しようとして、コードヒントのせいで「widows」プロパティというわけわかんないやつを出してしまうものです。この「コードヒント」の設定ファイルが、CodeHint.xmlで、Windowsなら C:\Program Files\Macromedia\Dreamweaver 8\configuration\CodeHints 内にあります。
で、これをカスタマイズしちゃって、あんまり使わないプロパティ（アジマスとか）をごっそりコメントアウト＆マージンとかの左右上下を時計回りに並べ替えたりしてしまった方を発見。さっそく使ってみたところものすごく便利。DWのコードヒントはいろいろなソフトの中でも特に秀逸なのに、さらにパワーアップです。
5/10にはDW8.0.2Updateも出ていて、こちらはIEのActiveX - Flash問題に対応していないHTMLを自動的に修正（JavaScriptを加える）してくれたりします。
 カラクリエイト:widowsプロパティの誤入力を防ぐCodeHints.xml
 Dreamweaver 8.0.2 Update  </description>
    </item>
    
    <item>
      <title>Gmail Mobile is coming</title>
      <link>https://lowply.github.io/blog/2006/05/gmail-mobile-is-coming/</link>
      <pubDate>Wed, 03 May 2006 02:10:52 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/gmail-mobile-is-coming/</guid>
      <description>いつの間にか日本版Gmail Mobileが動き始めています。今までできなかったログインができる様になっていて、メールボックスやタイトルも表示されています。 ただし、まだ日本語が文字化けしているので使えません。（PCからのアクセスだと日本語もしっかり通ります。docomoだとOKなのかな？）　きっともうすぐオフィシャルリリースが来ます。これで国内旅行ならノートPCは要らなくなるはず。 極小のGmailロゴが素敵です。
 Gmail
 Gmail Mobile  </description>
    </item>
    
    <item>
      <title>FirefoxとGoogleの今後</title>
      <link>https://lowply.github.io/blog/2006/05/future-of-firefox-and-google/</link>
      <pubDate>Wed, 03 May 2006 01:59:52 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/05/future-of-firefox-and-google/</guid>
      <description>Googleの技術者が語る「Firefoxへの深いかかわり」 : ITpro
GoogleとFirefoxは今後も連携を強めていくらしい、という記事。いろいろと書いてあり興味深いですが一番気になったのは、
 Whatと呼ぶ，ローカルにデータを保存する機能をサポートする。WhatはMozilla，Apple，Operaが参加するWthatワーキング・グループで標準化が行われている仕様。cookieの拡張だが，cookieのようにデータそのものをHTTPリクエストに含めることはないfrom ITpro : 2006/05/01
 という部分。気になります。なんというか最近特にIE vs その他みたいな構図が目立つ気がします。</description>
    </item>
    
    <item>
      <title>Google Maps Euro</title>
      <link>https://lowply.github.io/blog/2006/04/google-maps-euro/</link>
      <pubDate>Thu, 27 Apr 2006 12:11:07 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/04/google-maps-euro/</guid>
      <description>Google Maps in Europe 発表。
 Accompanying this release, we have greatly improved high resolution imagery coverage for Europe in both Google Maps and Google Earth. Check out the Eiffel Tower in Paris, Olympiastadion in Berlin, and the Grand Canal in Venice.from Google Official Blog : 2006/04/26
 先日から、MapsとLocalの名称を統合するという発表もあったり、APIもv2が出たりと動きがありましたが、今回は4ヶ国同時対応です。さらに、衛星写真の解像度が日本のMapsの数倍高くなっているので、エッフェル塔かなり。
いろいろ発見できるのが一つの楽しみですが、またそんなチャンスが増えました。
 Google Official Blog  </description>
    </item>
    
    <item>
      <title>Google Calendar</title>
      <link>https://lowply.github.io/blog/2006/04/google-calendar/</link>
      <pubDate>Fri, 14 Apr 2006 00:13:32 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2006/04/google-calendar/</guid>
      <description>昨年からCL2のコードネームで噂されていた、Googleのオンラインカレンダー Google Calendar がついに登場。Gmailから想像するより動作は速く、実用に耐えそうです。でもさすがに感触はiCalの方が使いやすくて、ブラウザの中であれもできます、これもできますっていうのも、今はプログラマ達の技術力のアピールという意味合いが強いようで、正直どうなんでしょうか。。そんな中でGoogleはどれくらい実用的なツールとしてこの新しいオンラインアプリケーションを仕上げてくるのか、とても気になります。</description>
    </item>
    
  </channel>
</rss>