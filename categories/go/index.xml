<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on lowply.github.io</title>
    <link>https://lowply.github.io/categories/go/</link>
    <description>Recent content in Go on lowply.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 14 Jan 2017 03:33:43 +0900</lastBuildDate>
    
	<atom:link href="https://lowply.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Route 53用のCLIツールをGoで書いた</title>
      <link>https://lowply.github.io/blog/2017/01/wrote-lacrosse/</link>
      <pubDate>Sat, 14 Jan 2017 03:33:43 +0900</pubDate>
      
      <guid>https://lowply.github.io/blog/2017/01/wrote-lacrosse/</guid>
      <description>AWS Route 53 上の特定の FQDN に対して value と TTL を指定して UPSERT をリクエストするコマンドラインツールを書いた。元々は気楽なシェルスクリプトだったものを、練習も兼ねて Go で書き直して GitHub Release へのデプロイまでちゃんとやってみた。
lowply/lacrosse: A simple CLI tool to update DNS records on Amazon Route 53
動機 そもそもは、 Let’s Encrypt のドメイン認証を lukas2511/dehydrated を使って dns-01 challenge で実行したくて、それ用の hook スクリプト内で手軽に _acme-challenge.example.com への TXT レコードを設定したいというのがきっかけだった。これを使うと hook.sh の deploy_challenge 部分を下記のように書ける。
deploy_challenge() { local DOMAIN=&amp;#34;${1}&amp;#34; TOKEN_FILENAME=&amp;#34;${2}&amp;#34; TOKEN_VALUE=&amp;#34;${3}&amp;#34; lacrosse _acme-challenge.${DOMAIN} TXT ${TOKEN_VALUE} 300 default } で、これが個人的にすごく便利で気に入っていたので、 思いついて Go で書き直してみることにした。パッケージの依存関係については Masterminds/glide、クロスコンパイルには mitchellh/gox、CI には Travis CI、デプロイはタグ打って push すると Travis が ビルドしてバイナリを GitHub Release に上げてくれる、という感じでシンプルに、あまり複雑なライブラリとかは使わないようにした。</description>
    </item>
    
  </channel>
</rss>